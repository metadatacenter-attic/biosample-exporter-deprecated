package org.metadatacenter.submission;

import biosample.TypeAttribute;
import biosample.TypeBioSample;
import biosample.TypeBioSampleIdentifier;
import com.fasterxml.jackson.databind.ObjectMapper;
import common.sp.TypeDescriptor;
import generated.*;
import org.metadatacenter.submission.biosample.AIRRTemplate;
import org.metadatacenter.submission.biosample.BioSampleOptionalAttribute;
import org.metadatacenter.submission.biosample.FileName;
import org.metadatacenter.submission.biosample.FileType;
import org.metadatacenter.submission.biosample.NCBIBioProject;
import org.metadatacenter.submission.biosample.NCBIBioSample;
import org.metadatacenter.submission.biosample.NCBISRA;
import org.metadatacenter.submission.biosample.SRAOptionalAttribute;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import java.io.File;
import java.io.IOException;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.UUID;

// TODO Very brittle. Need to do a lot more testing for empty values

/**
 * Convert a CEDAR JSON Schema-based AIRR template instance into a BioProject/BioSample/SRA XML-based submission.
 */
public class AIRRTemplate2SRAConverter
{
  private List<String> bioSampleIds = new ArrayList<>();
  private List<String> sraIds = new ArrayList<>();

  public static void main(String[] argc) throws IOException, JAXBException, DatatypeConfigurationException
  {
    ObjectMapper mapper = new ObjectMapper();

    File airrInstanceJSONFile = new File(
      AIRRTemplate2SRAConverter.class.getClassLoader().getResource("./json/AIRRInstance1.json").getFile());

    AIRRTemplate airrInstance = mapper.readValue(airrInstanceJSONFile, AIRRTemplate.class);

    AIRRTemplate2SRAConverter airrTemplate2SRAConverter = new AIRRTemplate2SRAConverter();

    String sraXML = airrTemplate2SRAConverter.generateSRASubmissionXMLFromAIRRTemplateInstance(airrInstance);

    System.out.print(sraXML);
  }

  /**
   * The {@link org.metadatacenter.submission.biosample.AIRRTemplate} class is generated by jsonschema2pojo from the
   * AIRRTemplate.json JSON Schema file in the resources directory.
   *
   * @param airrInstance An AIRR template instance
   * @return A string containing a BioSample-conformant XML representation of the supplied AIRR instance
   * @throws DatatypeConfigurationException If a configuration error occurs during processing
   * @throws JAXBException                  If a JAXB error occurs during processing
   */
  public String generateSRASubmissionXMLFromAIRRTemplateInstance(AIRRTemplate airrInstance)
    throws DatatypeConfigurationException, JAXBException
  {
    final generated.ObjectFactory objectFactory = new generated.ObjectFactory();
    final biosample.ObjectFactory bioSampleObjectFactory = new biosample.ObjectFactory();
    final common.sp.ObjectFactory spCommonObjectFactory = new common.sp.ObjectFactory();

    TypeSubmission xmlSubmission = objectFactory.createTypeSubmission();
    NCBIBioProject ncbiBioProject = airrInstance.getNCBIBioProject();

    // BioProject ID
//    ncbiBioProject.setBioProjectId(ncbiBioProject.getBioProjectId()); //BioProject ID

    // Project Title
//    ncbiBioProject.setProjectDataType(ncbiBioProject.getProjectDataType()); // project title

    // Submission/Description/public description
//    ncbiBioProject.setPublicDescription(ncbiBioProject.getPublicDescription());  // public description

    // Submission/Description/project data type
//    ncbiBioProject.setProjectDataType(ncbiBioProject.getProjectDataType()); // proejct data type

    // Submission/Description/sample scope
//    ncbiBioProject.setSampleScope(ncbiBioProject.getSampleScope()); // proejct sample scope

    // Submission/Description/Organization/ContactInfo/Name

//    ncbiBioProject.setFirstName(ncbiBioProject.getFirstName()); // first name
//    ncbiBioProject.setLastName(ncbiBioProject.getLastName()); // last name

    // Submission/Description/Organization/ContactInfo/email
//    ncbiBioProject.setEmail(ncbiBioProject.getEmail()); // e-mail

    // Submission/Description/Organization/Name
    // Submission/Description/Organization
//    ncbiBioProject.setSubmittingOrganization(ncbiBioProject.getSubmittingOrganization()); // Submitting Organization

    // Submission/Description/Department/Name
//    ncbiBioProject.setDepartment(ncbiBioProject.getDepartment()); // Submitting Organization // department

    for (NCBIBioSample ncbiBioSample : airrInstance.getNCBIBioSample()) {

      // Submission/Action[1] - BioSample
      TypeSubmission.Action bioSampleAction = objectFactory.createTypeSubmissionAction();
      xmlSubmission.getAction().add(bioSampleAction);

      // Submission/Action[1]/AddData/target_db
      TypeSubmission.Action.AddData addData = objectFactory.createTypeSubmissionActionAddData();
      bioSampleAction.setAddData(addData);
      addData.setTargetDb("BioSample");

      // Submission/Action[1]/AddData/Data/content_type
      TypeSubmission.Action.AddData.Data data = objectFactory.createTypeSubmissionActionAddDataData();
      addData.getData().add(data);
      data.setContentType("XML");

      // Submission/Action[1]/AddData/Data/XMLContent
      TypeSubmission.Action.AddData.Data.XmlContent xmlContent = objectFactory.createTypeInlineDataXmlContent();
      data.setXmlContent(xmlContent);

      // Submission/Action[1]/AddData/Data/XMLContent/BioSample/schema_version
      TypeBioSample bioSample = bioSampleObjectFactory.createTypeBioSample();
      xmlContent.setBioSample(bioSample);
      bioSample.setSchemaVersion("2.0");

      // Submission/Action[1]/AddData/Data/XMLContent/BioSample/SampleID
      TypeBioSampleIdentifier sampleID = bioSampleObjectFactory.createTypeBioSampleIdentifier();
      bioSample.setSampleId(sampleID);

      // Submission/Action[1]/AddData/Data/XMLContent/BioSample/SampleID/SPUID
      TypeBioSampleIdentifier.SPUID spuid = bioSampleObjectFactory.createTypeBioSampleIdentifierSPUID();
      sampleID.getSPUID().add(spuid);
      spuid.setSpuidNamespace("CEDAR");
      spuid.setValue(createNewBioSampleId());

      // Submission/Action[1]/AddData/Data/XMLContent/BioSample/Descriptor
      TypeDescriptor descriptor = spCommonObjectFactory.createTypeDescriptor();
      bioSample.setDescriptor(descriptor);
      descriptor.setTitle("CEDAR-NCBI Example instance of mythania gravis study"); // TODO Where from?

      // XXX: The <BioProject> tag is unknown to the working submission example
//      TypeRefId bioProject = spCommonObjectFactory.createTypeRefId();
//      bioSample.getBioProject().add(bioProject);

      // Submission/Action[1]/AddData/Data/XMLContent/BioSample/BioProject/PrimaryID
//      TypePrimaryId bioProjectPrimaryID = spCommonObjectFactory.createTypePrimaryId();
//      bioProject.setPrimaryId(bioProjectPrimaryID);
//      bioProjectPrimaryID.setDb("BioProject");
//      bioProjectPrimaryID.setValue(ncbiBioProject.getBioProjectId().getValue());
      // Submission/Action[1]/AddData/Data/XMLContent/BioSample/Package
      bioSample
        .setPackage("Human.1.0"); // TODO Is this hard coded for AIRR? //Could be get from datatype part of bioproject

      //RE-CHECK LOOPS VARIABLES
      // Submission/Action[1]/AddData/Data/XMLContent/BioSample/Attributes
      TypeBioSample.Attributes bioSampleAttributes = bioSampleObjectFactory.createTypeBioSampleAttributes();
      bioSample.setAttributes(bioSampleAttributes);

      // Submission/Action[1]/AddData/Data/XMLContent/BioSample/Attributes/Attribute - AIRR BioSample attributes

      // New add
      String value = ncbiBioSample.getReleaseDate().getValue();
      if (value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("projectedReleaseDate");
        attribute.setValue(value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // New add
      value = ncbiBioSample.getSampleType().getValue();
      if (value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("sampleType");
        attribute.setValue(value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // New add
      value = ncbiBioSample.getSampleName().getValue();
      if (value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("sampleName");
        attribute.setValue(value);
        bioSampleAttributes.getAttribute().add(attribute);
      }
      // new add
      value = ncbiBioSample.getIsolate().getValue();
      if (value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("isolate");
        attribute.setValue(value);
        bioSampleAttributes.getAttribute().add(attribute);
      }
      // New add
      value = ncbiBioSample.getOrganism().getValueLabel();
      if (value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("organism");
        attribute.setValue(value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      value = ncbiBioSample.getAge().getValue();
      if (value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("age");
        attribute.setValue(value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      value = ncbiBioSample.getBiomaterialProvider().getValue();
      if (value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("biomaterialProvider");
        attribute.setValue(value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      value = ncbiBioSample.getSex().getValue();
      if (value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("sex");
        attribute.setValue(value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      value = ncbiBioSample.getTissue().getValueLabel();
      if (value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("tissue");
        attribute.setValue(value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      //Added new
      value = ncbiBioSample.getPhenotype().getValue();
      if (value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("phenotype");
        attribute.setValue(value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      //Added new
      value = ncbiBioSample.getCellType().getValueLabel();
      if (value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("cellType");
        attribute.setValue(value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      //Added new
      value = ncbiBioSample.getCellSubtype().getValueLabel();
      if (value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("cellSubType");
        attribute.setValue(value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      //Added new
      value = ncbiBioSample.getDisease().getValueLabel();
      if (value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("disease");
        attribute.setValue(value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // new add
      value = ncbiBioSample.getDiseaseStage().getValue();
      if (value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("diseaseStage");
        attribute.setValue(value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // new add
      value = ncbiBioSample.getHealthState().getValue();
      if (value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("healthState");
        attribute.setValue(value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      //RE-CHECK LOOPS VARIABLES

      for (BioSampleOptionalAttribute optionalAttribute : ncbiBioSample.getBioSampleOptionalAttributes()) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName(optionalAttribute.getName().getValue());
        attribute.setValue(optionalAttribute.getValue().getValue());
        bioSampleAttributes.getAttribute().add(attribute);
      }
    }

    //RE-CHECK LOOPS VARIABLES
    int sraIndex = 0; // to track the corresponding BioSample record for this SRA entry
    for (NCBISRA ncbiSRA : airrInstance.getNCBISRA()) {

      // Submission/Action[1]/AddData/Data/XMLContent/BioSample/Attributes
      TypeBioSample.Attributes sraAttributes = bioSampleObjectFactory.createTypeBioSampleAttributes();

      // Submission/Action[2] - SRA
      TypeSubmission.Action sraAction = objectFactory.createTypeSubmissionAction();
      xmlSubmission.getAction().add(sraAction);

      // Submission/Action[2]/AddFiles/target_db
      TypeSubmission.Action.AddFiles sraAddFiles = objectFactory.createTypeSubmissionActionAddFiles();
      sraAction.setAddFiles(sraAddFiles);
      sraAddFiles.setTargetDb("SRA");
      // TODO Set attribute CDE ID?

      // XXX: No information about file attachment in the instance
      // Submission/Action[2]/AddFiles/File
//      TypeSubmission.Action.AddFiles.File sraFile = objectFactory.createTypeSubmissionActionAddFilesFile();
//      if (sraFile != null) {
//        sraAddFiles.getFile().add(sraFile);
//      }

      // Submission/Action[1]/AddFiles/Attributes/Attribute - AIRR SRA attributes
      String value = ncbiSRA.getSampleName().getValue();
      if (value != null) {
        TypeFileAttribute fileAttribute = objectFactory.createTypeFileAttribute();
        fileAttribute.setName("sampleName");
        fileAttribute.setValue(value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      value = ncbiSRA.getLibraryId().getValue();
      if (value != null) {
        TypeFileAttribute fileAttribute = objectFactory.createTypeFileAttribute();
        fileAttribute.setName("libraryID");
        fileAttribute.setValue(value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      value = ncbiSRA.getLibraryTitle().getValue();
      if (value != null) {
        TypeFileAttribute fileAttribute = objectFactory.createTypeFileAttribute();
        fileAttribute.setName("libraryTitle");
        fileAttribute.setValue(value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      value = ncbiSRA.getLibraryStrategy().getValue();
      if (value != null) {
        TypeFileAttribute fileAttribute = objectFactory.createTypeFileAttribute();
        fileAttribute.setName("libraryStrategy");
        fileAttribute.setValue(value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      value = ncbiSRA.getLibrarySource().getValue();
      if (value != null) {
        TypeFileAttribute fileAttribute = objectFactory.createTypeFileAttribute();
        fileAttribute.setName("librarySource");
        fileAttribute.setValue(value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      value = ncbiSRA.getLibrarySelection().getValue();
      if (value != null) {
        TypeFileAttribute fileAttribute = objectFactory.createTypeFileAttribute();
        fileAttribute.setName("librarySelection");
        fileAttribute.setValue(value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      value = ncbiSRA.getLibraryLayout().getValue();
      if (value != null) {
        TypeFileAttribute fileAttribute = objectFactory.createTypeFileAttribute();
        fileAttribute.setName("libraryLayout");
        fileAttribute.setValue(value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      value = ncbiSRA.getPlatform().getValue();
      if (value != null) {
        TypeFileAttribute fileAttribute = objectFactory.createTypeFileAttribute();
        fileAttribute.setName("platform");
        fileAttribute.setValue(value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      value = ncbiSRA.getInstrumentModel().getValue();
      if (value != null) {
        TypeFileAttribute fileAttribute = objectFactory.createTypeFileAttribute();
        fileAttribute.setName("instrumentModel");
        fileAttribute.setValue(value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      //new added
      value = ncbiSRA.getDesignDescription().getValue();
      if (value != null) {
        TypeFileAttribute fileAttribute = objectFactory.createTypeFileAttribute();
        fileAttribute.setName("designDescription");
        fileAttribute.setValue(value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }
      // File name and type (multiple) new added
      //RE-CHECK LOOPS VARIABLES
      for (SRAOptionalAttribute sraOptionalAttribute : ncbiSRA.getSRAOptionalAttributes()) {

        FileType fileType = sraOptionalAttribute.getFileType();
        if (fileType != null) {
          TypeFileAttribute fileAttribute = objectFactory.createTypeFileAttribute();
          fileAttribute.setName("FileType");
          fileAttribute.setValue(fileType.getValue());
          sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
        }

        FileName fileName = sraOptionalAttribute.getFileName();
        if (fileName != null) {
          TypeFileAttribute fileAttribute = objectFactory.createTypeFileAttribute();
          fileAttribute.setName("FileName");
          fileAttribute.setValue(fileName.getValue());
          sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
        }
      }

      // BioProject Reference ID
      TypeSPUID bioProjectSpuid = objectFactory.createTypeSPUID();
      bioProjectSpuid.setSpuidNamespace("CEDAR");
      bioProjectSpuid.setValue(ncbiBioProject.getBioProjectId().getValue());

      TypeRefId bioProjectRefId = objectFactory.createTypeRefId();
      bioProjectRefId.setSPUID(bioProjectSpuid);

      TypeFileAttributeRefId bioProjectIdentifier = objectFactory.createTypeFileAttributeRefId();
      bioProjectIdentifier.setName("BioProject");
      bioProjectIdentifier.setRefId(bioProjectRefId);
      sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(bioProjectIdentifier);

      // BioSample Reference ID
      TypeSPUID bioSampleSpuid = objectFactory.createTypeSPUID();
      bioSampleSpuid.setSpuidNamespace("CEDAR");
      bioSampleSpuid.setValue(getBioSampleId(sraIndex));

      TypeRefId bioSampleRefId = objectFactory.createTypeRefId();
      bioSampleRefId.setSPUID(bioSampleSpuid);

      TypeFileAttributeRefId bioSampleIdentifier = objectFactory.createTypeFileAttributeRefId();
      bioSampleIdentifier.setName("BioSample");
      bioSampleIdentifier.setRefId(bioSampleRefId);
      sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(bioSampleIdentifier);

      // SRA ID
      TypeLocalId localSraId = objectFactory.createTypeLocalId();
      localSraId.setValue(createNewSraId());

      TypeIdentifier sraIdentifier = objectFactory.createTypeIdentifier();
      sraIdentifier.setLocalId(localSraId);

      sraAddFiles.setIdentifier(sraIdentifier);

      sraIndex++; // increment the index counter
    }

    StringWriter writer = new StringWriter();

    JAXBElement<TypeSubmission> submissionRoot = objectFactory.createSubmission(xmlSubmission);
    JAXBContext ctx = JAXBContext.newInstance(TypeSubmission.class);
    Marshaller marshaller = ctx.createMarshaller();
    marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
    //marshaller.marshal(submissionRoot, System.out);
    marshaller.marshal(submissionRoot, writer);

    return writer.toString();
  }

  private XMLGregorianCalendar createXMLGregorianCalendar(String date) throws DatatypeConfigurationException {
    DatatypeFactory datatypeFactory = DatatypeFactory.newInstance();
    GregorianCalendar gc = new GregorianCalendar();

    return datatypeFactory.newXMLGregorianCalendar(gc);
  }

  private String createNewBioSampleId() {
    String id = "BioSample-" + UUID.randomUUID();
    bioSampleIds.add(id);
    return id;
  }

  private String createNewSraId() {
    String id = "SRA-" + UUID.randomUUID();
    sraIds.add(id);
    return id;
  }

  private String getBioSampleId(int index) {
    return bioSampleIds.get(index);
  }

  private String getSraId(int index) {
    return sraIds.get(index);
  }
}
